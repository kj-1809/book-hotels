// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

enum UserRole {
    USER
    ADMIN
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          UserRole  @default(USER)
    accounts      Account[]
    sessions      Session[]
    bookings      Booking[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Schemas for the website
model Hotel {
    id          String    @id @default(cuid())
    name        String
    info        String
    description String    @db.Text
    price       Int
    rating      Int
    amenities   Amenity[]
    bookings    Booking[]

    @@map("hotels")
}

model Amenity {
    id     String  @id @default(cuid())
    title  String
    hotels Hotel[]

    @@map("amenities")
}

model Booking {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    checkIn   DateTime
    checkOut  DateTime
    guests    Int
    rooms     Int
    total     Int
    hotelId   String
    hotel     Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([hotelId])
    @@index([userId])
    @@map("bookings")
}
